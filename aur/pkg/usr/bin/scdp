#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# Systray CD Player: Reproduce tus CDs de audio desde la bandeja del sistema
# (c) 2012 Alfonso Saavedra "Son Link"
# http://sonlinkblog.blogspot.com.es/p/scripts.html
# Under GPLv3 License

import gobject, gtk
import gettext, thread
import gst, time

from ConfigParser import ConfigParser
from os import environ
from os.path import isfile
from commands import getoutput
from ctypes import CDLL
from optparse import OptionParser

gobject.threads_init()

configfile = environ['HOME']+'/.scdp'

APP = 'scdp'
gettext.textdomain (APP)
gettext.bindtextdomain (APP, '/usr/share/locale')
_ = gettext.gettext
gettext.install(APP, '/usr/share/locale', unicode=1)


class SCDP():
	"""
	Init the program
	"""
	
	def __init__(self):		
		self.actual_track = 1
		
		self.status = -1
		self.device = ''
		# -1 -> No hace nada, 0 Stop, 1 play, 2 pause
		
		self.cfg = ConfigParser()
		self.readconfig()
		
		self.statusicon = gtk.StatusIcon()
		
		self.statusicon.set_from_stock(gtk.STOCK_CDROM)
		self.statusicon.connect("popup-menu", self.show_menu)
		self.statusicon.connect('activate', self.play)
		
		if self.autostart == 1:
			self.play()
		
	def show_menu(self, icon, button, time):
		"""
		Show the menu
		"""
		
		menu = gtk.Menu()
		
		# Play
		self.play_button = gtk.ImageMenuItem(stock_id=gtk.STOCK_MEDIA_PLAY)
		self.play_button.connect('activate', self.play)
		menu.append(self.play_button)
		
		# Next
		about = gtk.ImageMenuItem(stock_id=gtk.STOCK_MEDIA_NEXT)
		about.connect('activate', self.next)
		menu.append(about)
		
		# Previous
		config = gtk.ImageMenuItem(stock_id=gtk.STOCK_MEDIA_PREVIOUS)
		config.connect('activate', self.prev)
		menu.append(config)
		
		stop = gtk.ImageMenuItem(stock_id=gtk.STOCK_MEDIA_STOP)
		stop.connect('activate', self.stop)
		menu.append(stop)
		
		eject = gtk.MenuItem(label='Expulsar')
		eject.connect('activate', self.eject)
		menu.append(eject)
		
		sep = gtk.SeparatorMenuItem()
		menu.append(sep)
		
		config = gtk.ImageMenuItem(stock_id=gtk.STOCK_PREFERENCES)
		config.connect('activate', self.configure)
		menu.append(config)
		
		salir = gtk.ImageMenuItem(stock_id=gtk.STOCK_QUIT)
		salir.connect('activate', self.quit)
		menu.append(salir)
		
		menu.show_all()
		menu.popup(None, None, gtk.status_icon_position_menu, button, time, self.statusicon)
					
	def play(self, *args):
		"""
		Change the state to play or pause
		"""
		
		if self.status == 1:
			self.pipeline.set_state(gst.STATE_PAUSED)
			self.status = 2
			
		elif self.status == 2:
			self.pipeline.set_state(gst.STATE_PLAYING)
			self.status = 1
		
		else:
			self.create_pipeline()			
			self.pipeline.set_state(gst.STATE_PLAYING)
			self.status = 1
		
	def prev(self, w, *args):
		"""
		Change to previous track
		"""
		
		if self.actual_track > 1:
			self.actual_track -= 1
			self.pipeline.set_state(gst.STATE_READY)
			self.pipeline.get_by_name("cdda").set_property("track", self.actual_track)
			self.pipeline.set_state(gst.STATE_PLAYING)
			self.update_info()
		
	def stop(self, *args):
		"""
		Stop
		"""
		try:
			self.pipeline.set_state(gst.STATE_NULL)
		except:
			pass
			
		self.status = 0
	
	def next(self, w, *args):
		"""
		Change to next track
		"""
		if self.actual_track < self.file_tags['track-count']:
			self.actual_track += 1
		
			self.pipeline.set_state(gst.STATE_READY)
			self.pipeline.get_by_name("cdda").set_property("track", self.actual_track)
			self.pipeline.set_state(gst.STATE_PLAYING)
			self.update_info()
		
	def eject(self, w, *args):
		"""
		Eject the CD
		"""
		
		self.stop()
		getoutput('eject '+ self.device)
		
	def create_pipeline(self):
		"""
		Create the pipelino for playing
		"""
		
		cdsrc = 'cdparanoiasrc device=%s track=%i name=cdda ! audioconvert ! volume name=volume ! alsasink' % (self.device, self.actual_track)
		self.pipeline = gst.parse_launch(cdsrc)
		
		bus = self.pipeline.get_bus()
		
		bus.add_signal_watch()
		
		bus.connect("message::tag", self.bus_message_tag)
		bus.connect("message::error", self.bus_message_error)
		bus.connect("message::eos", self.next)
			
	def bus_message_error(self, bus, message):
		e, d = message.parse_error()
		self.statusicon.set_tooltip_text("ERROR: "+ str(e))
	
	def bus_message_tag(self, bus, message):
		
		"""Esta es la función encargada de recoger los datos del bus de Gstreamer, principalmente los tags de los ficheros de audio"""
		self.file_tags = {}
		
		taglist = message.parse_tag()
		
		for key in taglist.keys():
			try:
				self.file_tags[key] = taglist[key]
			except:
				return False
		
		self.update_info()
							
	def update_info(self):
		"""
		Show info on icon tooltip
		"""
		if self.actual_track < 10:
			track = '0'+str(self.actual_track)
		else:
			track = str(self.actual_track)
			
		if self.file_tags['track-count'] < 10:
			total_tracks = '0'+str(self.file_tags['track-count'])
		else:
			total_tracks = str(self.file_tags['track-count'])
		
		self.statusicon.set_tooltip_text(_('Track %s of %s') % (track, total_tracks))
		#self.statusicon.set_tooltip_markup(_('<b>Track %s of %s</b>') % (track, total_tracks))
	
	def readconfig(self):
		"""
		Read the configuration
		"""
		if not isfile(configfile):
			f = open(configfile, 'w')
			f.write("[scdp]\ndevice=/dev/sr0\nautostart=0")
			
		self.cfg.read([configfile])
		
		if options.device:
			self.device = options.device
		else:
			self.device = self.cfg.get('scdp', 'device')
			
		self.autostart = int(self.cfg.get('scdp', 'autostart'))
		
	def configure(self, w):
		
		"""
		Show dialog for configure the program
		"""
		configwin = gtk.Dialog(_("Configure Systray CD Player"), buttons=(gtk.STOCK_SAVE, gtk.RESPONSE_ACCEPT, gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL))
		
		def __saveconfig(w, res):
			"""
			Save the new configuration
			"""
			# Destroy the configuratión dialog
			
			if res == gtk.RESPONSE_ACCEPT:
				# If press Accept, save the new configuration
				cfg = ConfigParser()
				cfg.read([configfile])
				cfg.set('scdp', 'device', self.device_entry.get_text())
				
				if self.autostart_check.get_active():
					cfg.set('scdp', 'autostart', 1)
				else:
					cfg.set('scdp', 'autostart', 0)
					
				f = open(configfile, "w")
				cfg.write(f)
				f.close()
				self.stop()
				self.actual_track = 1
				self.status = -1
				self.device = self.device_entry.get_text()
				self.play()
				
			w.destroy()
		
		hbox1 = gtk.HBox()
		configwin.vbox.add(hbox1)
		
		label = gtk.Label(str=_('Device'))
		label.set_alignment(0, 0)
		label.set_padding(5, 5)
		hbox1.pack_start(label, False, False, 0)
		
		self.device_entry = gtk.Entry()
		self.device_entry.set_text(self.device)
		hbox1.pack_start(self.device_entry, False, False, 0)
		
		hbox1 = gtk.HBox()
		configwin.vbox.add(hbox1)
		
		self.autostart_check = gtk.CheckButton(label=_('autostart at boot'))
		if self.autostart == 1:
			self.autostart_check.set_active(True)
			
		configwin.vbox.add(self.autostart_check)
		
		configwin.connect("response", __saveconfig)
		configwin.show_all()
		
	def convert_ns(self, t):
		"""Esta función se encarga de convertir los milisegundos en segundos y minutos"""
		# This method was submitted by Sam Mason.
		# It's much shorter than the original one.
		s,ns = divmod(t, 1000000000)
		m,s = divmod(s, 60)

		if m < 60:
			return "%02i:%02i" %(m,s)
		else:
			h,m = divmod(m, 60)
			return "%i:%02i:%02i" %(h,m,s)

	def quit(self, w):
		"""
		Exit from program
		"""
		self.stop()
		exit()
	
if __name__ == '__main__':

	usage = "Usage: %prog [options]"
	parser = OptionParser(usage=usage, version='0.3.5')
	parser.add_option("-d", "--device", dest="device",
	action="store", metavar="DEVICE", type='str', help="Set device from read CD")
	parser.add_option("-f", "--force", action="store_true", dest="force", default=False, help="Force kill another scdp instance")	
		
	(options, args) = parser.parse_args()

	process = getoutput('ps -A')
	# Check is exist another PacSyu instace
	if not 'scdp' in process:
		libc = CDLL('/lib/libc.so.6')
		libc.prctl (15, 'scdp', 0, 0, 0)
		SCDP()
		gtk.main()
		
	else:
		if options.force:
			kill = getoutput('killall scdp')
			libc = CDLL('/lib/libc.so.6')
			libc.prctl (15, 'scdp', 0, 0, 0)
			SCDP()
			gtk.main()
		else:
			warning = gtk.MessageDialog(parent=None, flags=0, type=gtk.MESSAGE_WARNING, buttons=gtk.BUTTONS_OK, message_format=_("Error!"))
			warning.format_secondary_text(_("Another instance of Systray CD Player is running.\nIf before instance(s) don't close correctly, kill the process scdp"))
			def close(w, res):
				w.destroy()
				exit(1)
			warning.connect("response", close)
			warning.run()
